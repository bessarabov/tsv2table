#!/usr/bin/perl

use strict;
use warnings FATAL => 'all';
use feature qw(say);
use utf8;
use open qw(:std :utf8);

use Getopt::Long;

sub parse_options {

    my $header;
    my $separator = "\t";
    my $help;

    GetOptions (
        'header=s' => \$header,
        'separator=s' => \$separator,
        'help' => \$help,
    ) or die("Error in command line arguments\n");

    if ($help) {

        say "
cat file.tsv | tsv2table [options]

Converts tsv data into a human-readable table.

Options:
    --header=<on|off>   Specify if there is a header row in the input file.
                        Optional. Default is \"off\"
    --separator=<value> Specify the separator character.
                        Optional. Default is \"\\t\"

    --help              Display this help message.

https://github.com/bessarabov/tsv2table
";

        exit 0;
    }

    if (defined($header)) {
        my %header2value = (
            on => 1,
            off => 0,
        );
        if (exists $header2value{$header}) {
            $header = $header2value{$header};
        } else {
            say "Invalid value for --header=$header Valid values are: off (default), on";
            exit 1;
        }
    }

    if ($separator eq '\t') {
        $separator = "\t";
    }

    my $options = {
        header => $header,
        separator => $separator,
    };

}

sub main {

    my $options = parse_options();

    my @max_column_length;

    my @data;
    while (<>) {
        chomp;
        s/\r\z//;
        my @row = split $options->{separator}, $_;

        for (my $i = 0; $i < scalar @row; $i++) {
            if (length($row[$i]) > ($max_column_length[$i] // 0)) {
                $max_column_length[$i] = length($row[$i]);
            }
        }

        push @data, \@row;
    }

    my $header_printed = 0;

    foreach my $row (@data) {
        my $count = scalar @$row;
        my $i = 0;
        foreach my $el (@$row) {
            my $align;

            if ($el =~ /^-?\d+\z/a) {
                # align to the right
                $align = '';
            } else {
                # align to the left
                $align = '-';
            }

            printf "%$align" . $max_column_length[$i] .'s', $el;
            if ($count != $i+1) {
                print ' | ';
            }
            $i++;
        }
        print "\n";

        if ($options->{header} && !$header_printed) {
            my $full_length = 0;
            $full_length += $_ foreach @max_column_length;
            say '-' x ($full_length + 3*(scalar(@max_column_length)-1));
            $header_printed = 1;
        }
    }

}
main();
