#!/usr/bin/perl

use strict;
use warnings FATAL => 'all';
use feature qw(say);
use utf8;
use open qw(:std :utf8);

use Encode qw(decode);
use Getopt::Long;
use I18N::Langinfo qw(CODESET langinfo);

our $VERSION = 'dev';

sub parse_options {

    my $header;
    my $separator;
    my $version;
    my $help;

    my $codeset = langinfo(CODESET);
    @ARGV = map { decode $codeset, $_ } @ARGV;

    GetOptions (
        'header=s' => \$header,
        'separator=s' => \$separator,
        'version' => \$version,
        'help' => \$help,
    ) or die("Error in command line arguments\n");

    if ($version) {
        say $VERSION;
        exit 0;
    }

    if ($help) {

        say '
## Usage

    cat file.tsv | tsv2table [options]

Converts TSV data into a human-readable table.

## Options

    --header=<auto|on|off>   Specify if there is a header row in the input file.
                             Optional. Default is "auto"
    --separator=<value>      Specify the separator character (or characters).
                             Optional. Default is "\t"

    --version                Display info about version.
    --help                   Display this help message.

## --header=auto

When the `--header=auto` option is specified, a simple heuristic is applied to
detect the presence of a header. This detection is made by examining the
first and the second rows of data. If the first row contains only
string values, and the second row contains non-string values,
then it is considered that the data has a header.

## Version

' . $VERSION . '

## Project Repository

https://github.com/bessarabov/tsv2table
';

        exit 0;
    }

    if (defined($header)) {
        my %valid_header_values = map { $_ => 1 } qw(
            auto
            on
            off
        );
        if (!exists $valid_header_values{$header}) {
            say "Invalid value for --header=$header Valid values are: auto (default), on, off";
            exit 1;
        }
    } else {
        $header = 'auto';
    }

    if (defined($separator)) {
        if ($separator eq '\t') {
            $separator = "\t";
        }
    } else {
        $separator = "\t";
    }

    my $options = {
        header => $header,
        separator => $separator,
    };

    return $options;
}

# my ($type, $non_fractional_length, $fractional_length)  = get_type('13.123'); # ('float', 2, 4)
sub get_type {
    my ($value) = @_;

    if ($value =~ /^-?\d+\z/a) {
        return 'int', length($value), 0;
    } elsif ($value =~ /^(-?\d+)(\.\d+)\z/a) {
        return 'float', length($1), length($2);
    } else {
        return 'string', length($value), 0;
    }
}

sub get_value_with_indentation {
    my ($value, $globl_string_length, $global_non_fractional_length, $global_fractional_length) = @_;

    $globl_string_length //= 0;
    $global_non_fractional_length //= 0;
    $global_fractional_length //= 0;

    my $align;
    my $additon_after_value = '';
    my $column_length = $global_non_fractional_length + $global_fractional_length;

    if ($globl_string_length > $column_length) {
        $column_length = $globl_string_length;
    }

    my ($type, $non_fractional_length, $fractional_length)  = get_type($value);

    if ($type eq 'int') {
        # align to the right
        $align = '';
        $additon_after_value = ' 'x$global_fractional_length;
    } elsif ($type eq 'float') {
        # align to the right
        $align = '';
        $additon_after_value = ' 'x($global_fractional_length - $fractional_length);
    } else {
        # align to the left
        $align = '-';
    }

    my $value_with_indentation = sprintf(
        "%${align}${column_length}s",
        $value . $additon_after_value,
    );

    return $value_with_indentation;
}

sub max {
    my ($one, $two, $three) = @_;
    die 'Internal error' if $three;

    $one //= 0;
    $two //= 0;

    return $one > $two ? $one : $two;
}

sub main {

    my $options = parse_options();

    my @data;

    my @max_string_length;
    my @max_number_non_fractional_length;
    my @max_number_fractional_length;

    my $column_count = 0;
    my $row_number = 1;
    my %row_types;

    while (<>) {
        s/\r?\n\z//;
        my @elements = split(qr(\Q$options->{separator}\E), $_, -1);

        if (scalar(@elements) > $column_count) {
            $column_count = scalar(@elements);
        }

        for (my $i = 0; $i < scalar(@elements); $i++) {
            my ($type, $non_fractional_length, $fractional_length)  = get_type($elements[$i]);

            if ($type eq 'string') {
                $max_string_length[$i] = max($non_fractional_length, $max_string_length[$i]);
            } elsif ($type eq 'int' || $type eq 'float') {
                $max_number_non_fractional_length[$i] = max($non_fractional_length, $max_number_non_fractional_length[$i]);
                $max_number_fractional_length[$i] = max($fractional_length, $max_number_fractional_length[$i]);
            } else {
                die 'Internal error. This should not happen';
            }

            if ($row_number < 3) {
                $row_types{$row_number}->{$type} = 1;
            }
        }

        push @data, \@elements;
        $row_number++;
    }

    my $header_printed = 0;
    my $data_has_header_heuristic = 0;

    if (
        exists($row_types{2})
        && join('', sort keys %{$row_types{1}}) eq 'string'
        && join('', sort keys %{$row_types{2}}) ne 'string'
    ) {
        $data_has_header_heuristic = 1
    }

    foreach my $row (@data) {
        my $count = scalar @$row;
        my $i = 0;
        foreach my $el (@$row) {
            my $value = get_value_with_indentation(
                $el,
                $max_string_length[$i],
                $max_number_non_fractional_length[$i],
                $max_number_fractional_length[$i],
            );
            print $value;
            if ($count != $i+1) {
                print ' | ';
            }
            $i++;
        }
        print "\n";

        if (
            !$header_printed
            && (
                ($options->{header} eq 'on')
                || ($options->{header} eq 'auto' && $data_has_header_heuristic)
            )
        ) {
            my $full_length = 0;
            for (my $i = 0; $i <= $column_count; $i++) {
                my $column_length =
                    ($max_number_non_fractional_length[$i] // 0)
                    + ($max_number_fractional_length[$i] // 0);

                if (($max_string_length[$i] // 0)> $column_length) {
                    $column_length = $max_string_length[$i];
                }

                $full_length += $column_length;
            }
            say '-' x ($full_length + 3*($column_count-1));
            $header_printed = 1;
        }
    }

}
main() if not defined caller;
1;
